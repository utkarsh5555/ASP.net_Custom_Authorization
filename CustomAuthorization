public class CustomAuthorization : AuthorizeAttribute, IAuthorizationFilter
    {
        public string LoginPage { get; set; }

        public override void OnAuthorization(AuthorizationContext filterContext)
        {
            LoginPage = "~/Users/Index?ReturnUrl=" + filterContext.HttpContext.Request.RawUrl;
            if (!filterContext.HttpContext.User.Identity.IsAuthenticated)
            {
                filterContext.HttpContext.Response.Redirect(LoginPage);
            }
            HttpContext ctx = HttpContext.Current;
            if (ctx.Session != null && ctx.Session["CurrentSession"] != null)
            {
                if (ctx.Session.IsNewSession)
                {
                    string sessionCookie = ctx.Request.Headers["Cookie"];
                    if ((null != sessionCookie) && (sessionCookie.IndexOf("ASP.NET_SessionId") >= 0))
                    {
                        string redirectOnSuccess = filterContext.HttpContext.Request.Url.PathAndQuery;
                        string redirectUrl = string.Format("?ReturnUrl={0}", redirectOnSuccess);
                        string loginUrl = "~/Users/Index/" + redirectUrl;
                        if (ctx.Request.IsAuthenticated)
                        {
                            FormsAuthentication.SignOut();
                        }
                        RedirectResult rr = new RedirectResult(loginUrl);
                        filterContext.Result = rr;
                    }
                }
            }
            else
            {
                RedirectResult rr = new RedirectResult(LoginPage);
                filterContext.Result = rr;
            }
            base.OnAuthorization(filterContext);
        }
    }
