 public class CustomAuthorization : AuthorizeAttribute
    {
        public AppSession CurrentSession
        {
            get { return (HttpContext.Current.Session["CurrentSession"] as AppSession); }
            set { HttpContext.Current.Session["CurrentSession"] = value; }
        }
        public override void OnAuthorization(AuthorizationContext filterContext)
        {
            var loginPage = "~/Account/Login?ReturnUrl=" + filterContext.HttpContext.Request.RawUrl;
            var ctx = HttpContext.Current;
            var httpContext = filterContext.HttpContext;
            var request = httpContext.Request;
            var response = httpContext.Response;
            var user = httpContext.User;
            var sessionCookie = request.Headers["Cookie"];
            if ((CurrentSession?.CurrentUser == null) &&
                HttpContext.Current.User.Identity.IsAuthenticated)
            {
                using (var service = new SupaSystemService())
                {
                    Exception ex;
                    CurrentSession = new AppSession
                    {
                        CurrentUser = service
                            .FindOneUser(new User() {Email = HttpContext.Current.User.Identity.GetUserName()}, out ex)
                            .ToModel()
                    };
                }
            }
            if (CurrentSession == null &&
                ctx.Session.IsNewSession && sessionCookie != null &&
                (sessionCookie.IndexOf("ASP.NET_SessionId", StringComparison.Ordinal) >= 0))
            {
                if (request.IsAjaxRequest())
                {
                    if (user.Identity.IsAuthenticated == false)
                        response.StatusCode = (int)HttpStatusCode.Unauthorized;
                    else
                        response.StatusCode = (int)HttpStatusCode.Forbidden;

                    response.SuppressFormsAuthenticationRedirect = true;
                    response.End();
                }
                else
                {
                    filterContext.Result = new RedirectResult(loginPage);
                    return;
                }
            }
            base.OnAuthorization(filterContext);
        }
    }
